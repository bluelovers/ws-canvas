"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function text_split(text) {
    return text
        .replace(/\r\n|\r/ug, '\n')
        .split(/(\n|\s|.)/iu)
        .filter(s => s !== '');
}
exports.text_split = text_split;
function wrapText(context, text, { x, y, maxWidth, lineHeight, fontSize, minSize, letterSpacing, tabSize, area, }) {
    let xx = x;
    fontSize = Math.ceil(Math.max(context.measureText('åœ‹').width / 2, (fontSize | 0) / 2)) * 2;
    lineHeight = Math.ceil(lineHeight | 0) || fontSize * 1.6;
    if (minSize == null) {
        minSize = fontSize;
    }
    minSize = (minSize | 0) || Math.ceil(Math.max(fontSize / 2, minSize | 0));
    letterSpacing |= 0;
    tabSize = tabSize | 0 || 2;
    let lines = [];
    let max_width = 0;
    let line = text_split(text)
        .reduce((line, char) => {
        let _do = false;
        let w = 0;
        if (char === '\n') {
            _do = true;
            char = '';
        }
        else if (char !== '') {
            let width = context.measureText(char).width;
            if (!width && char === '\t') {
                width = fontSize * tabSize;
            }
            if (width < 1) {
                /*
                console.dir({
                    char,
                    width,
                });
                 */
                return line;
            }
            w = Math.ceil(Math.max(width, minSize));
            let x2 = xx + Math.max(w, minSize);
            if (x2 > maxWidth) {
                _do = true;
            }
        }
        if (_do) {
            max_width = Math.max(max_width, xx + w);
            xx = x;
            y += lineHeight;
            lines.push(line);
            line = [];
        }
        if (char !== '') {
            context.fillText(char, xx, y);
            xx += w + letterSpacing;
            line.push(char);
        }
        return line;
    }, []);
    if (line.length) {
        lines.push(line);
        line = undefined;
    }
    const max_height = y + lineHeight;
    const ret = {
        fontSize,
        lineHeight,
        minSize,
        letterSpacing,
        max_width,
        max_height,
        lines,
    };
    //console.dir(ret);
    return ret;
}
exports.wrapText = wrapText;
exports.default = wrapText;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcFRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3cmFwVGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWlCQSxTQUFnQixVQUFVLENBQUMsSUFBWTtJQUV0QyxPQUFPLElBQUk7U0FDVCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQztTQUMxQixLQUFLLENBQUMsYUFBYSxDQUFDO1NBQ3BCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDckI7QUFDSCxDQUFDO0FBUEQsZ0NBT0M7QUE0QkQsU0FBZ0IsUUFBUSxDQUFDLE9BQWlCLEVBQUUsSUFBWSxFQUFFLEVBQ3pELENBQUMsRUFDRCxDQUFDLEVBQ0QsUUFBUSxFQUNSLFVBQVUsRUFDVixRQUFRLEVBQ1IsT0FBTyxFQUNQLGFBQWEsRUFDYixPQUFPLEVBQ1AsSUFBSSxHQUNjO0lBRWxCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUVYLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNGLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsSUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDO0lBRXpELElBQUksT0FBTyxJQUFJLElBQUksRUFDbkI7UUFDQyxPQUFPLEdBQUcsUUFBUSxDQUFDO0tBQ25CO0lBRUQsT0FBTyxHQUFHLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFFLGFBQWEsSUFBSSxDQUFDLENBQUM7SUFFbkIsT0FBTyxHQUFHLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNCLElBQUksS0FBSyxHQUFlLEVBQUUsQ0FBQztJQUUzQixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFFbEIsSUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztTQUN6QixNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFFdEIsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVWLElBQUksSUFBSSxLQUFLLElBQUksRUFDakI7WUFDQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQ1gsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNWO2FBQ0ksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUNwQjtZQUNDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO1lBRTVDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxLQUFLLElBQUksRUFDM0I7Z0JBQ0MsS0FBSyxHQUFHLFFBQVEsR0FBRyxPQUFPLENBQUM7YUFDM0I7WUFFRCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQ2I7Z0JBQ0M7Ozs7O21CQUtHO2dCQUVILE9BQU8sSUFBSSxDQUFDO2FBQ1o7WUFFRCxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBRXhDLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUVuQyxJQUFJLEVBQUUsR0FBRyxRQUFRLEVBQ2pCO2dCQUNDLEdBQUcsR0FBRyxJQUFJLENBQUM7YUFDWDtTQUNEO1FBRUQsSUFBSSxHQUFHLEVBQ1A7WUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRXhDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDUCxDQUFDLElBQUksVUFBVSxDQUFDO1lBRWhCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakIsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNWO1FBRUQsSUFBSSxJQUFJLEtBQUssRUFBRSxFQUNmO1lBQ0MsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEVBQUUsSUFBSSxDQUFDLEdBQUcsYUFBYSxDQUFDO1lBRXhCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUMsRUFBRSxFQUFjLENBQUMsQ0FDbEI7SUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQ2Y7UUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLElBQUksR0FBRyxTQUFTLENBQUM7S0FDakI7SUFFRCxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDO0lBRWxDLE1BQU0sR0FBRyxHQUFvQjtRQUM1QixRQUFRO1FBQ1IsVUFBVTtRQUNWLE9BQU87UUFDUCxhQUFhO1FBQ2IsU0FBUztRQUNULFVBQVU7UUFDVixLQUFLO0tBQ0wsQ0FBQztJQUVGLG1CQUFtQjtJQUVuQixPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUF0SEQsNEJBc0hDO0FBRUQsa0JBQWUsUUFBUSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBJQ29udGV4dFxue1xuXG5cdG1lYXN1cmVUZXh0KHRleHQ6IHN0cmluZyk6IHtcblx0XHR3aWR0aDogbnVtYmVyLFxuXHR9O1xuXG5cdGZpbGxUZXh0KHRleHQ6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIsIC4uLmFyZ3Y6IGFueVtdKTogYW55O1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFyZWFcbntcblx0d2lkdGg6IG51bWJlcixcblx0aGVpZ2h0OiBudW1iZXIsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0X3NwbGl0KHRleHQ6IHN0cmluZyk6IHN0cmluZ1tdXG57XG5cdHJldHVybiB0ZXh0XG5cdFx0LnJlcGxhY2UoL1xcclxcbnxcXHIvdWcsICdcXG4nKVxuXHRcdC5zcGxpdCgvKFxcbnxcXHN8LikvaXUpXG5cdFx0LmZpbHRlcihzID0+IHMgIT09ICcnKVxuXHRcdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJV2FycFRleHRPcHRpb25zXG57XG5cdHg6IG51bWJlcixcblx0eTogbnVtYmVyLFxuXHRtYXhXaWR0aD86IG51bWJlcixcblx0bGluZUhlaWdodD86IG51bWJlcixcblx0Zm9udFNpemU/OiBudW1iZXIsXG5cdG1pblNpemU/OiBudW1iZXIsXG5cdHRhYlNpemU/OiBudW1iZXIsXG5cblx0bGV0dGVyU3BhY2luZz86IG51bWJlcixcblxuXHRhcmVhPzogSUFyZWEsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVdhcnBUZXh0UmV0dXJuXG57XG5cdGZvbnRTaXplOiBudW1iZXIsXG5cdGxpbmVIZWlnaHQ6IG51bWJlcixcblx0bWluU2l6ZTogbnVtYmVyLFxuXHRsZXR0ZXJTcGFjaW5nOiBudW1iZXIsXG5cdG1heF93aWR0aDogbnVtYmVyLFxuXHRtYXhfaGVpZ2h0OiBudW1iZXIsXG5cdGxpbmVzOiBzdHJpbmdbXVtdLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFRleHQoY29udGV4dDogSUNvbnRleHQsIHRleHQ6IHN0cmluZywge1xuXHR4LFxuXHR5LFxuXHRtYXhXaWR0aCxcblx0bGluZUhlaWdodCxcblx0Zm9udFNpemUsXG5cdG1pblNpemUsXG5cdGxldHRlclNwYWNpbmcsXG5cdHRhYlNpemUsXG5cdGFyZWEsXG59OiBJV2FycFRleHRPcHRpb25zKTogSVdhcnBUZXh0UmV0dXJuXG57XG5cdGxldCB4eCA9IHg7XG5cblx0Zm9udFNpemUgPSBNYXRoLmNlaWwoTWF0aC5tYXgoY29udGV4dC5tZWFzdXJlVGV4dCgn5ZyLJykud2lkdGggLyAyLCAoZm9udFNpemUgfCAwKSAvIDIpKSAqIDI7XG5cdGxpbmVIZWlnaHQgPSBNYXRoLmNlaWwobGluZUhlaWdodCB8IDApIHx8IGZvbnRTaXplICogMS42O1xuXG5cdGlmIChtaW5TaXplID09IG51bGwpXG5cdHtcblx0XHRtaW5TaXplID0gZm9udFNpemU7XG5cdH1cblxuXHRtaW5TaXplID0gKG1pblNpemUgfCAwKSB8fCBNYXRoLmNlaWwoTWF0aC5tYXgoZm9udFNpemUgLyAyLCBtaW5TaXplIHwgMCkpO1xuXG5cdGxldHRlclNwYWNpbmcgfD0gMDtcblxuXHR0YWJTaXplID0gdGFiU2l6ZSB8IDAgfHwgMjtcblxuXHRsZXQgbGluZXM6IHN0cmluZ1tdW10gPSBbXTtcblxuXHRsZXQgbWF4X3dpZHRoID0gMDtcblxuXHRsZXQgbGluZSA9IHRleHRfc3BsaXQodGV4dClcblx0XHQucmVkdWNlKChsaW5lLCBjaGFyKSA9PlxuXHRcdHtcblx0XHRcdGxldCBfZG8gPSBmYWxzZTtcblx0XHRcdGxldCB3ID0gMDtcblxuXHRcdFx0aWYgKGNoYXIgPT09ICdcXG4nKVxuXHRcdFx0e1xuXHRcdFx0XHRfZG8gPSB0cnVlO1xuXHRcdFx0XHRjaGFyID0gJyc7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChjaGFyICE9PSAnJylcblx0XHRcdHtcblx0XHRcdFx0bGV0IHdpZHRoID0gY29udGV4dC5tZWFzdXJlVGV4dChjaGFyKS53aWR0aDtcblxuXHRcdFx0XHRpZiAoIXdpZHRoICYmIGNoYXIgPT09ICdcXHQnKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0d2lkdGggPSBmb250U2l6ZSAqIHRhYlNpemU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAod2lkdGggPCAxKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Lypcblx0XHRcdFx0XHRjb25zb2xlLmRpcih7XG5cdFx0XHRcdFx0XHRjaGFyLFxuXHRcdFx0XHRcdFx0d2lkdGgsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0ICovXG5cblx0XHRcdFx0XHRyZXR1cm4gbGluZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHcgPSBNYXRoLmNlaWwoTWF0aC5tYXgod2lkdGgsIG1pblNpemUpKTtcblxuXHRcdFx0XHRsZXQgeDIgPSB4eCArIE1hdGgubWF4KHcsIG1pblNpemUpO1xuXG5cdFx0XHRcdGlmICh4MiA+IG1heFdpZHRoKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0X2RvID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX2RvKVxuXHRcdFx0e1xuXHRcdFx0XHRtYXhfd2lkdGggPSBNYXRoLm1heChtYXhfd2lkdGgsIHh4ICsgdyk7XG5cblx0XHRcdFx0eHggPSB4O1xuXHRcdFx0XHR5ICs9IGxpbmVIZWlnaHQ7XG5cblx0XHRcdFx0bGluZXMucHVzaChsaW5lKTtcblx0XHRcdFx0bGluZSA9IFtdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY2hhciAhPT0gJycpXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnRleHQuZmlsbFRleHQoY2hhciwgeHgsIHkpO1xuXHRcdFx0XHR4eCArPSB3ICsgbGV0dGVyU3BhY2luZztcblxuXHRcdFx0XHRsaW5lLnB1c2goY2hhcik7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsaW5lO1xuXHRcdH0sIFtdIGFzIHN0cmluZ1tdKVxuXHQ7XG5cblx0aWYgKGxpbmUubGVuZ3RoKVxuXHR7XG5cdFx0bGluZXMucHVzaChsaW5lKTtcblx0XHRsaW5lID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0Y29uc3QgbWF4X2hlaWdodCA9IHkgKyBsaW5lSGVpZ2h0O1xuXG5cdGNvbnN0IHJldDogSVdhcnBUZXh0UmV0dXJuID0ge1xuXHRcdGZvbnRTaXplLFxuXHRcdGxpbmVIZWlnaHQsXG5cdFx0bWluU2l6ZSxcblx0XHRsZXR0ZXJTcGFjaW5nLFxuXHRcdG1heF93aWR0aCxcblx0XHRtYXhfaGVpZ2h0LFxuXHRcdGxpbmVzLFxuXHR9O1xuXG5cdC8vY29uc29sZS5kaXIocmV0KTtcblxuXHRyZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB3cmFwVGV4dFxuIl19