export function text_split(text) {
    return text
        .replace(/\r\n|\r/ug, '\n')
        .split(/(\n|\s|.)/iu)
        .filter(s => s !== '');
}
export function wrapText(context, text, { x, y, maxWidth, lineHeight, fontSize, minSize, letterSpacing, tabSize, area, }) {
    let xx = x;
    fontSize = Math.ceil(Math.max(context.measureText('åœ‹').width / 2, (fontSize | 0) / 2)) * 2;
    lineHeight = Math.ceil(lineHeight | 0) || fontSize * 1.6;
    if (minSize == null) {
        minSize = fontSize;
    }
    minSize = (minSize | 0) || Math.ceil(Math.max(fontSize / 2, minSize | 0));
    letterSpacing |= 0;
    tabSize = tabSize | 0 || 2;
    let lines = [];
    let max_width = 0;
    let line = text_split(text)
        .reduce((line, char) => {
        let _do = false;
        let w = 0;
        if (char === '\n') {
            _do = true;
            char = '';
        }
        else if (char !== '') {
            let width = context.measureText(char).width;
            if (!width && char === '\t') {
                width = fontSize * tabSize;
            }
            if (width < 1) {
                /*
                console.dir({
                    char,
                    width,
                });
                 */
                return line;
            }
            w = Math.ceil(Math.max(width, minSize));
            let x2 = xx + Math.max(w, minSize);
            if (x2 > maxWidth) {
                _do = true;
            }
        }
        if (_do) {
            max_width = Math.max(max_width, xx + w);
            xx = x;
            y += lineHeight;
            lines.push(line);
            line = [];
        }
        if (char !== '') {
            context.fillText(char, xx, y);
            xx += w + letterSpacing;
            line.push(char);
        }
        return line;
    }, []);
    if (line.length) {
        lines.push(line);
        line = undefined;
    }
    const max_height = y + lineHeight;
    const ret = {
        fontSize,
        lineHeight,
        minSize,
        letterSpacing,
        max_width,
        max_height,
        lines,
    };
    //console.dir(ret);
    return ret;
}
export default wrapText;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcFRleHQuanMiLCJzb3VyY2VSb290IjoiLi9saWIvIiwic291cmNlcyI6WyJ3cmFwVGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZO0lBRXRDLE9BQU8sSUFBSTtTQUNULE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDO1NBQzFCLEtBQUssQ0FBQyxhQUFhLENBQUM7U0FDcEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUNyQjtBQUNILENBQUM7QUE0QkQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxPQUFpQixFQUFFLElBQVksRUFBRSxFQUN6RCxDQUFDLEVBQ0QsQ0FBQyxFQUNELFFBQVEsRUFDUixVQUFVLEVBQ1YsUUFBUSxFQUNSLE9BQU8sRUFDUCxhQUFhLEVBQ2IsT0FBTyxFQUNQLElBQUksR0FDYztJQUVsQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFWCxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzRixVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQztJQUV6RCxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQ25CO1FBQ0MsT0FBTyxHQUFHLFFBQVEsQ0FBQztLQUNuQjtJQUVELE9BQU8sR0FBRyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxRSxhQUFhLElBQUksQ0FBQyxDQUFDO0lBRW5CLE9BQU8sR0FBRyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUzQixJQUFJLEtBQUssR0FBZSxFQUFFLENBQUM7SUFFM0IsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBRWxCLElBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7U0FDekIsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO1FBRXRCLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQztRQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFVixJQUFJLElBQUksS0FBSyxJQUFJLEVBQ2pCO1lBQ0MsR0FBRyxHQUFHLElBQUksQ0FBQztZQUNYLElBQUksR0FBRyxFQUFFLENBQUM7U0FDVjthQUNJLElBQUksSUFBSSxLQUFLLEVBQUUsRUFDcEI7WUFDQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUU1QyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQzNCO2dCQUNDLEtBQUssR0FBRyxRQUFRLEdBQUcsT0FBTyxDQUFDO2FBQzNCO1lBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUNiO2dCQUNDOzs7OzttQkFLRztnQkFFSCxPQUFPLElBQUksQ0FBQzthQUNaO1lBRUQsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUV4QyxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFbkMsSUFBSSxFQUFFLEdBQUcsUUFBUSxFQUNqQjtnQkFDQyxHQUFHLEdBQUcsSUFBSSxDQUFDO2FBQ1g7U0FDRDtRQUVELElBQUksR0FBRyxFQUNQO1lBQ0MsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUV4QyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxJQUFJLFVBQVUsQ0FBQztZQUVoQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLElBQUksR0FBRyxFQUFFLENBQUM7U0FDVjtRQUVELElBQUksSUFBSSxLQUFLLEVBQUUsRUFDZjtZQUNDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM5QixFQUFFLElBQUksQ0FBQyxHQUFHLGFBQWEsQ0FBQztZQUV4QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLEVBQUUsRUFBYyxDQUFDLENBQ2xCO0lBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUNmO1FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixJQUFJLEdBQUcsU0FBUyxDQUFDO0tBQ2pCO0lBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUVsQyxNQUFNLEdBQUcsR0FBb0I7UUFDNUIsUUFBUTtRQUNSLFVBQVU7UUFDVixPQUFPO1FBQ1AsYUFBYTtRQUNiLFNBQVM7UUFDVCxVQUFVO1FBQ1YsS0FBSztLQUNMLENBQUM7SUFFRixtQkFBbUI7SUFFbkIsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBRUQsZUFBZSxRQUFRLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIElDb250ZXh0XG57XG5cblx0bWVhc3VyZVRleHQodGV4dDogc3RyaW5nKToge1xuXHRcdHdpZHRoOiBudW1iZXIsXG5cdH07XG5cblx0ZmlsbFRleHQodGV4dDogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlciwgLi4uYXJndjogYW55W10pOiBhbnk7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXJlYVxue1xuXHR3aWR0aDogbnVtYmVyLFxuXHRoZWlnaHQ6IG51bWJlcixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRleHRfc3BsaXQodGV4dDogc3RyaW5nKTogc3RyaW5nW11cbntcblx0cmV0dXJuIHRleHRcblx0XHQucmVwbGFjZSgvXFxyXFxufFxcci91ZywgJ1xcbicpXG5cdFx0LnNwbGl0KC8oXFxufFxcc3wuKS9pdSlcblx0XHQuZmlsdGVyKHMgPT4gcyAhPT0gJycpXG5cdFx0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElXYXJwVGV4dE9wdGlvbnNcbntcblx0eDogbnVtYmVyLFxuXHR5OiBudW1iZXIsXG5cdG1heFdpZHRoPzogbnVtYmVyLFxuXHRsaW5lSGVpZ2h0PzogbnVtYmVyLFxuXHRmb250U2l6ZT86IG51bWJlcixcblx0bWluU2l6ZT86IG51bWJlcixcblx0dGFiU2l6ZT86IG51bWJlcixcblxuXHRsZXR0ZXJTcGFjaW5nPzogbnVtYmVyLFxuXG5cdGFyZWE/OiBJQXJlYSxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJV2FycFRleHRSZXR1cm5cbntcblx0Zm9udFNpemU6IG51bWJlcixcblx0bGluZUhlaWdodDogbnVtYmVyLFxuXHRtaW5TaXplOiBudW1iZXIsXG5cdGxldHRlclNwYWNpbmc6IG51bWJlcixcblx0bWF4X3dpZHRoOiBudW1iZXIsXG5cdG1heF9oZWlnaHQ6IG51bWJlcixcblx0bGluZXM6IHN0cmluZ1tdW10sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwVGV4dChjb250ZXh0OiBJQ29udGV4dCwgdGV4dDogc3RyaW5nLCB7XG5cdHgsXG5cdHksXG5cdG1heFdpZHRoLFxuXHRsaW5lSGVpZ2h0LFxuXHRmb250U2l6ZSxcblx0bWluU2l6ZSxcblx0bGV0dGVyU3BhY2luZyxcblx0dGFiU2l6ZSxcblx0YXJlYSxcbn06IElXYXJwVGV4dE9wdGlvbnMpOiBJV2FycFRleHRSZXR1cm5cbntcblx0bGV0IHh4ID0geDtcblxuXHRmb250U2l6ZSA9IE1hdGguY2VpbChNYXRoLm1heChjb250ZXh0Lm1lYXN1cmVUZXh0KCflnIsnKS53aWR0aCAvIDIsIChmb250U2l6ZSB8IDApIC8gMikpICogMjtcblx0bGluZUhlaWdodCA9IE1hdGguY2VpbChsaW5lSGVpZ2h0IHwgMCkgfHwgZm9udFNpemUgKiAxLjY7XG5cblx0aWYgKG1pblNpemUgPT0gbnVsbClcblx0e1xuXHRcdG1pblNpemUgPSBmb250U2l6ZTtcblx0fVxuXG5cdG1pblNpemUgPSAobWluU2l6ZSB8IDApIHx8IE1hdGguY2VpbChNYXRoLm1heChmb250U2l6ZSAvIDIsIG1pblNpemUgfCAwKSk7XG5cblx0bGV0dGVyU3BhY2luZyB8PSAwO1xuXG5cdHRhYlNpemUgPSB0YWJTaXplIHwgMCB8fCAyO1xuXG5cdGxldCBsaW5lczogc3RyaW5nW11bXSA9IFtdO1xuXG5cdGxldCBtYXhfd2lkdGggPSAwO1xuXG5cdGxldCBsaW5lID0gdGV4dF9zcGxpdCh0ZXh0KVxuXHRcdC5yZWR1Y2UoKGxpbmUsIGNoYXIpID0+XG5cdFx0e1xuXHRcdFx0bGV0IF9kbyA9IGZhbHNlO1xuXHRcdFx0bGV0IHcgPSAwO1xuXG5cdFx0XHRpZiAoY2hhciA9PT0gJ1xcbicpXG5cdFx0XHR7XG5cdFx0XHRcdF9kbyA9IHRydWU7XG5cdFx0XHRcdGNoYXIgPSAnJztcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKGNoYXIgIT09ICcnKVxuXHRcdFx0e1xuXHRcdFx0XHRsZXQgd2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KGNoYXIpLndpZHRoO1xuXG5cdFx0XHRcdGlmICghd2lkdGggJiYgY2hhciA9PT0gJ1xcdCcpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR3aWR0aCA9IGZvbnRTaXplICogdGFiU2l6ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh3aWR0aCA8IDEpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvKlxuXHRcdFx0XHRcdGNvbnNvbGUuZGlyKHtcblx0XHRcdFx0XHRcdGNoYXIsXG5cdFx0XHRcdFx0XHR3aWR0aCxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHQgKi9cblxuXHRcdFx0XHRcdHJldHVybiBsaW5lO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyA9IE1hdGguY2VpbChNYXRoLm1heCh3aWR0aCwgbWluU2l6ZSkpO1xuXG5cdFx0XHRcdGxldCB4MiA9IHh4ICsgTWF0aC5tYXgodywgbWluU2l6ZSk7XG5cblx0XHRcdFx0aWYgKHgyID4gbWF4V2lkdGgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRfZG8gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChfZG8pXG5cdFx0XHR7XG5cdFx0XHRcdG1heF93aWR0aCA9IE1hdGgubWF4KG1heF93aWR0aCwgeHggKyB3KTtcblxuXHRcdFx0XHR4eCA9IHg7XG5cdFx0XHRcdHkgKz0gbGluZUhlaWdodDtcblxuXHRcdFx0XHRsaW5lcy5wdXNoKGxpbmUpO1xuXHRcdFx0XHRsaW5lID0gW107XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjaGFyICE9PSAnJylcblx0XHRcdHtcblx0XHRcdFx0Y29udGV4dC5maWxsVGV4dChjaGFyLCB4eCwgeSk7XG5cdFx0XHRcdHh4ICs9IHcgKyBsZXR0ZXJTcGFjaW5nO1xuXG5cdFx0XHRcdGxpbmUucHVzaChjaGFyKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGxpbmU7XG5cdFx0fSwgW10gYXMgc3RyaW5nW10pXG5cdDtcblxuXHRpZiAobGluZS5sZW5ndGgpXG5cdHtcblx0XHRsaW5lcy5wdXNoKGxpbmUpO1xuXHRcdGxpbmUgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRjb25zdCBtYXhfaGVpZ2h0ID0geSArIGxpbmVIZWlnaHQ7XG5cblx0Y29uc3QgcmV0OiBJV2FycFRleHRSZXR1cm4gPSB7XG5cdFx0Zm9udFNpemUsXG5cdFx0bGluZUhlaWdodCxcblx0XHRtaW5TaXplLFxuXHRcdGxldHRlclNwYWNpbmcsXG5cdFx0bWF4X3dpZHRoLFxuXHRcdG1heF9oZWlnaHQsXG5cdFx0bGluZXMsXG5cdH07XG5cblx0Ly9jb25zb2xlLmRpcihyZXQpO1xuXG5cdHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdyYXBUZXh0XG4iXX0=